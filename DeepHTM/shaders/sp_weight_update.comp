#version 430

#ifndef EXTERNAL_PARAMETERS
	#define LEARNING_RATE_LOCATION 0
	#define INPUT_COUNT_LOCATION 1

	#define GRADIENTS_BINDING 0
	#define INPUTS_BINDING 1
	#define WEIGHTS_BINDING 2
	#define BIASES_BINDING 3

	#define MINIBATCH_SIZE 1u
#endif

layout(location = LEARNING_RATE_LOCATION) uniform float learningRate;

layout(location = INPUT_COUNT_LOCATION) uniform uint inputCount;

layout(binding = GRADIENTS_BINDING) buffer Gradients
{
	float gradients[];
};

layout(binding = INPUTS_BINDING) buffer Inputs
{
	float inputs[];
};

layout(binding = WEIGHTS_BINDING) buffer Weights
{
	float weights[];
};

layout(binding = BIASES_BINDING) buffer Biases
{
	float biases[];
};

layout(local_size_x = MINIBATCH_SIZE) in;

shared float localGradients[MINIBATCH_SIZE];

void main()
{
	const uint minibatch = gl_LocalInvocationID.x;
	const uint _input = gl_WorkGroupID.x;
	const uint minicolumn = gl_WorkGroupID.y, minicolumnCount = gl_NumWorkGroups.y, globalMinicolumn = minibatch * minicolumnCount + minicolumn;
	
	if(gl_WorkGroupID.x < inputCount)
	{
		uint globalInput = minibatch * inputCount + _input;
		localGradients[minibatch] = gradients[globalMinicolumn] * inputs[globalInput];
	}
	else
	{
		localGradients[minibatch] = gradients[globalMinicolumn];
	}

	for(uint stride = MINIBATCH_SIZE >> 1u; stride > 0u; stride >>= 1u)
	{
		barrier();

		if(minibatch < stride)
		{
			localGradients[minibatch] += localGradients[minibatch + stride];
		}
	}

	if(minibatch == 0u)
	{
		if(gl_WorkGroupID.x < inputCount)
		{
			weights[gl_WorkGroupID.x + minicolumn * inputCount] -= learningRate * localGradients[0u];
		}
		else
		{
			biases[minicolumn] -= learningRate * localGradients[0u];
		}
	}
}