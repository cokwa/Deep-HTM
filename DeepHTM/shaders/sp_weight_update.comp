#version 430

#ifndef EXTERNAL_PARAMETERS
	#define MINIBATCH_SIZE 1u
#endif

uniform float learningRate;

buffer Gradients
{
	float gradients[];
};

buffer Inputs
{
	float inputs[];
};

buffer Weights
{
	float weights[];
};

layout(local_size_x = MINIBATCH_SIZE) in;

shared float localGradients[MINIBATCH_SIZE];

void main()
{
	const uint minibatch = gl_LocalInvocationID.x;
	const uint _input = gl_GlobalInvocationID.x, inputCount = gl_NumWorkGroups.x, globalInput = minibatch * inputCount + _input;
	const uint minicolumn = gl_GlobalInvocationID.y, minicolumnCount = gl_NumWorkGroups.y, globalMinicolumn = minibatch * minicolumnCount + minicolumn;
	
	localGradients[minibatch] = gradients[globalMinicolumn] * inputs[globalInput];

	for(uint stride = MINIBATCH_SIZE >> 1u; stride > 0u; stride >>= 1u)
	{
		barrier();

		if(minibatch < stride)
		{
			localGradients[minibatch] += localGradients[minibatch + stride];
		}
	}

	if(minibatch == 0u)
	{
		weights[_input + minicolumn * inputCount] -= learningRate * localGradients[0u];
	}
}