#version 430

#ifndef EXTERNAL_PARAMETERS
	#define SPARSITY_LOCATION 0
	#define DUTY_CYCLE_INERTIA_LOCATION 1
	#define BOOSTING_WEIGHT_LOCATION 2
	#define ITERATION_LOCATION 3

	#define DUTY_CYCLES_BINDING 0
	#define MINICOLUMNS_BINDING 1
	#define MINICOLUMN_STATES_BINDING 2
	#define GRADIENTS_BINDING 3

	#define MINIBATCH_SIZE 1u
#endif

layout(location = SPARSITY_LOCATION) uniform float sparsity;

layout(location = DUTY_CYCLE_INERTIA_LOCATION) uniform float dutyCycleInertia;
layout(location = BOOSTING_WEIGHT_LOCATION) uniform float boostingWeight;

layout(location = ITERATION_LOCATION) uniform uint iteration;

layout(binding = DUTY_CYCLES_BINDING) buffer DutyCycles
{
	float dutyCycles[];
};

layout(binding = MINICOLUMNS_BINDING) buffer Minicolumns
{
	float minicolumns[];
};

layout(binding = MINICOLUMN_STATES_BINDING) buffer MinicolumnStates
{
	uint minicolumnStates[];
};

layout(binding = GRADIENTS_BINDING) buffer Gradients
{
	float gradients[];
};

//layout(local_size_x = MINIBATCH_SIZE) in;
layout(local_size_x = 1) in;

//shared uint winCounts[MINIBATCH_SIZE];

void main()
{
	/*
	const uint minicolumn = gl_WorkGroupID.x, minicolumnCount = gl_NumWorkGroups.x;
	const uint minibatch = gl_LocalInvocationID.x;
	const uint globalMinicolumn = minibatch * minicolumnCount + minicolumn;

	float dutyCycle = mix(float(minicolumnStates[globalMinicolumn]), dutyCycles[globalMinicolumn], dutyCycleInertia);
	dutyCycles[globalMinicolumn] = dutyCycle;

	//TODO: replace the assignment
	float delta = boostingWeight * (-sparsity / dutyCycle + (1.0 - sparsity) / (1.0 - dutyCycle));
	gradients[globalMinicolumn] = delta;

	winCounts[minibatch] = minicolumnStates[globalMinicolumn];

	for(uint stride = MINIBATCH_SIZE >> 1u; stride > 0u; stride >>= 1u)
	{
		barrier();

		if(minibatch < stride)
		{
			winCounts[minibatch] += winCounts[minibatch + stride];
		}
	}

	if(minibatch == 0u)
	{
		float dutyCycle = mix(float(winCounts[0u]) / MINIBATCH_SIZE, dutyCycles[minicolumn], dutyCycleInertia);
		dutyCycles[minicolumn] = dutyCycle;

		//TODO: replace the assignment
		gradients[minicolumn] = boostingWeight * (-sparsity / dutyCycle + (1.0 - sparsity) / (1.0 - dutyCycle));
	}
	*/

	const uint minicolumn = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x;

	float dutyCycle = mix(float(minicolumnStates[minicolumn]), dutyCycles[minicolumn], dutyCycleInertia);
	dutyCycles[minicolumn] = dutyCycle;

	//TODO: replace the assignment
	gradients[minicolumn] *= float(minicolumnStates[minicolumn]);// + boostingWeight * (-sparsity / dutyCycle + (1.0 - sparsity) / (1.0 - dutyCycle));
}