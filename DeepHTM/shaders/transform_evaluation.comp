#version 430

#ifndef EXTERNAL_PARAMETERS
	#define INPUTS_BINDING 0
	#define OUTPUTS_BINDING 1
	#define WEIGHTS_BINDING 2
	#define BIASES_BINDING 3

	#define INPUT_COUNT 1u
#endif

layout(binding = INPUTS_BINDING) buffer Inputs
{
	float inputs[];
};

layout(binding = OUTPUTS_BINDING) buffer Outputs
{
	float outputs[];
};

layout(binding = WEIGHTS_BINDING) buffer Weights
{
	float weights[];
};

layout(binding = BIASES_BINDING) buffer Biases
{
	float biases[];
};

layout(local_size_x = INPUT_COUNT) in;

shared float localSums[INPUT_COUNT];

void main()
{
	const uint globalOutput = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x;
	const uint localInput = gl_LocalInvocationIndex, localOutput = gl_WorkGroupID.x, inputOffset = gl_WorkGroupID.y * INPUT_COUNT;
	
	localSums[localInput] = weights[localInput + localOutput * INPUT_COUNT] * inputs[inputOffset + localInput];

	for(uint stride = INPUT_COUNT >> 1u; stride > 0u; stride >>= 1u)
	{
		barrier();

		if(localInput < stride)
		{
			localSums[localInput] += localSums[localInput + stride];
		}
	}

	if(localInput == 0u)
	{
		outputs[globalOutput] = localSums[0] + biases[localOutput];
	}
}