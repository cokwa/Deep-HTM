#version 430

#ifndef EXTERNAL_PARAMETERS
	#define SPARSITY_LOCATION 0

	#define MINICOLUMNS_BINDING 0
	#define DUTY_CYCLES_BINDING 1
	#define MASKS_BINDING 2
	#define WINNER_MINICOLUMNS_BINDING 3

	#define MINICOLUMN_COUNT 1u
	#define WINNER_MINICOLUMN_COUNT 1u
#endif

layout(location = SPARSITY_LOCATION) uniform float sparsity;

layout(binding = MINICOLUMNS_BINDING) buffer Minicolumns
{
	float minicolumns[];
};

layout(binding = DUTY_CYCLES_BINDING) buffer DutyCycles
{
	float dutyCycles[];
};

layout(binding = MASKS_BINDING) buffer Masks
{
	uint masks[];
};

layout(binding = WINNER_MINICOLUMNS_BINDING) buffer WinnerMinicolumns
{
	uint winnerMinicolumns[];
};

//TODO: probably should someday change it to be constant
layout(local_size_x = MINICOLUMN_COUNT) in;

struct Candidate
{
	uint index;
	float value;
};

//partially sorted
shared Candidate sortedMinicolumns[MINICOLUMN_COUNT];

//this is a mess

void main()
{
	const uint workGroupIndex = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x;
	const uint outputOffset = workGroupIndex * MINICOLUMN_COUNT;
	const uint localOutput = gl_LocalInvocationIndex;
	const uint globalOutput = outputOffset + localOutput;

	sortedMinicolumns[localOutput] = Candidate(globalOutput, (max(minicolumns[globalOutput], 0.0) + 1.0) * exp(4.0 * (sparsity - dutyCycles[globalOutput])));
	masks[globalOutput] = 0u;

	uint activeOffset = workGroupIndex * WINNER_MINICOLUMN_COUNT;
	
	for(uint localActive = 0u; localActive < WINNER_MINICOLUMN_COUNT; localActive++)
	{
		for(uint stride = MINICOLUMN_COUNT >> 1u; stride > 0u; stride >>= 1u)
		{
			barrier();

			if(localActive <= localOutput && localOutput - localActive < stride && localOutput + stride < MINICOLUMN_COUNT && sortedMinicolumns[localOutput].value < sortedMinicolumns[localOutput + stride].value)
			{
				Candidate tmp = sortedMinicolumns[localOutput];
				sortedMinicolumns[localOutput] = sortedMinicolumns[localOutput + stride];
				sortedMinicolumns[localOutput + stride] = tmp;
			}
		}
	}

	if(localOutput < WINNER_MINICOLUMN_COUNT)
	{
		uint winnerMinicolumn = sortedMinicolumns[localOutput].index;
		masks[winnerMinicolumn] = 1u;
		winnerMinicolumns[activeOffset + localOutput] = winnerMinicolumn;
	}

	//TODO: temporary
	else
	{
		minicolumns[sortedMinicolumns[localOutput].index] = 0.0;
	}
}